" $XDG_CONFIG_HOME/vim/vimrc  @ hortensia
" need  < alias vim='vim -u $XDG_CONFIG_HOME/vim/vimrc > in zsh.rc to read this file
" Last modified 2018-08-10

" get the default
" source $VIMRUNTIME/defaults.vim

" Use Vim settings. This must be first
" Vundle start
set nocompatible
filetype off 
" set the runtime path to include Vundle and initialize
set rtp+=~/.config/vim/bundle/Vundle.vim
call vundle#begin()




" let Vundle manage Vundle
" add all plugins here 
" format for git : user/repository
" to install, place below plugin then run vim, :PluginUpdate
Plugin 'VundleVim/Vundle.vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'rstacruz/sparkup'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'plasticboy/vim-markdown'
Plugin 'Yggdroot/indentLine'
Plugin 'justb3a/vim-smarties'
Plugin 'chriskempson/base16-vim'
Plugin 'fatih/vim-go'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'prettier/vim-prettier'

"!!!!!!!!!!!!!!!!!!!!!!!
" Plugin '
" all plugins must be added before this line

call vundle#end() "required
" turn filetype functionality back on
filetype plugin indent on "required

" Set color scheme
" colorscheme Mustang

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" allow file format detection 
syntax on


" Basic settings
set viminfo+=n~/.config/vim/viminfo
set history=500		" keep 100 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set autoindent		" always set autoindenting on
set smartindent	
set showcmd		" display incomplete commands
set showmatch		" highlight matching braces/brackets	
set number		" turns line numbering on
set showmode
set laststatus=2	" always show status line
set display=truncate " show @@@ in the last line if trucated
set linebreak
set title
set encoding=utf-8
set fileencoding=utf-8
set t_co=256		" enable 256 colors 
set tabstop=4		" defaults indent to 4 spaces for tabs 
set shiftwidth=4
set softtabstop=4
set mouse=a		" enable mouse
set mousehide 		" hide when characters are typed
set nobackup		" turn backup off
set nowritebackup
set directory=.swp/,~/.swp/,/tmp//	" set dir for swap files
set nrformats-=octal



" tmux support
let g:ScreenImpl = 'Tmux'
let g:ScreenShellInitialFocus = 'shell' 
" latex stuff
" For Latex work: open *.pdf files in evince/xpdf upon opening of *.tex files in vim 
au BufRead *.tex silent !xpdf %<.pdf 2>/dev/null &
au BufRead *.Rnw silent !xpdf %<.pdf 2>/dev/null &

" file type sepcific commands
" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78
" override default tab to 4 spaces
autocmd FileType html setlocal ts=2 sw=2 expandtab
" Set autocomplete and filetype settings
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

" Markdown settings 
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0

" Prevent underlines in markup
let html_no_rendering=1

" Prevent comment chars been added on new line creation
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" When a curly brace pair is added, add a new tabbed line inside them
inoremap {<CR> {<CR>}<Esc>O<BS><Tab>

" save file as su even when edited by user - quickly enter :w!! to save
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" indent line color
let g:indentLine_color_term = 239
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:html_indent_inctags = "html,body,head,tbody"
" let g:indent_guides_enable_on_vim_startup = 1

" choose color theme
" /usr/share/vim/vimNN/colors
colorscheme blue

" Jump back to the last edit position when opening a file
:au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif



